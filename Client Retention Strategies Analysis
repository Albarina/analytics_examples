{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "FinalProjectAdditionalAssmnt.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H9rJTr56vjTm"
      },
      "source": [
        "  **Additional Assignment.** Figuring out client retention strategies.Compare the monthly payment distribution `MonthlyCharges` of all active clients with the clients who have left. Calculate the following statistics for each group: the average, minimum and maximum values, the median and the values of the 25 and 75% percentiles. Build distribution histograms based on your findings. \r\n",
        "Compare the behavior of the cleinets from the two groups below. \r\n",
        "  For each group, build any two graphs which display:\r\n",
        "- the share of Telephone users;\r\n",
        "- the share of Internet users."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i3RSUA5U76HM"
      },
      "source": [
        "Setting up, downloading, merging, and preprocessing data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uVW7ombjvhDS"
      },
      "source": [
        "#Set up all the necessary libraries\r\n",
        "import pandas as pd\r\n",
        "import os\r\n",
        "from google.colab import drive\r\n",
        "import numpy as np\r\n",
        "import datetime\r\n",
        "from sklearn import preprocessing\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import warnings\r\n",
        "warnings.filterwarnings('ignore')"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LjuxCUdyv02d",
        "outputId": "f3270528-181b-419a-f0cf-dae7c69a9030"
      },
      "source": [
        "drive.mount('/content/drive')"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kbo0eZm2QSU-"
      },
      "source": [
        "#download the data files\r\n",
        "internet_path='drive/My Drive/Final_provider/final_provider/internet.csv' \r\n",
        "internetDF = pd.read_csv(internet_path, index_col=['customerID'])   \r\n",
        "contract_path='drive/My Drive/Final_provider/final_provider/contract.csv'\r\n",
        "contractDF=pd.read_csv(contract_path, index_col='customerID')\r\n",
        "personal_path='drive/My Drive/Final_provider/final_provider/personal.csv'\r\n",
        "personalDF=pd.read_csv(personal_path, index_col=['customerID'])\r\n",
        "phone_path='drive/My Drive/Final_provider/final_provider/phone.csv'\r\n",
        "phoneDF=pd.read_csv(phone_path, index_col=['customerID'])"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TGUBfs_egTgE"
      },
      "source": [
        "phoneDF['PhoneServices']='Yes'"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fczanyj7zfec"
      },
      "source": [
        "churnDF=pd.DataFrame({'churn': (contractDF['EndDate']!='No').astype(int)})"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yG1HsuBD1FAw"
      },
      "source": [
        "contractDF.loc[contractDF['EndDate']=='No', 'EndDate'] = pd.datetime(2020,2,1)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IPvHQhVg1SGu"
      },
      "source": [
        "contractDF['EndDate']=pd.to_datetime(contractDF['EndDate'])\r\n",
        "contractDF['BeginDate']=pd.to_datetime(contractDF['BeginDate'])"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "id": "wAJD0xLB1co5",
        "outputId": "1bb0be5a-6422-4fa5-e803-4d8039c8688d"
      },
      "source": [
        "contractDF['Tenure']=(contractDF['EndDate']-contractDF['BeginDate']).dt.days.astype(float)\r\n",
        "contractDF.head()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BeginDate</th>\n",
              "      <th>EndDate</th>\n",
              "      <th>Type</th>\n",
              "      <th>PaperlessBilling</th>\n",
              "      <th>PaymentMethod</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Tenure</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>customerID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7590-VHVEG</th>\n",
              "      <td>2020-01-01</td>\n",
              "      <td>2020-02-01</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>31.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5575-GNVDE</th>\n",
              "      <td>2017-04-01</td>\n",
              "      <td>2020-02-01</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.5</td>\n",
              "      <td>1036.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3668-QPYBK</th>\n",
              "      <td>2019-10-01</td>\n",
              "      <td>2019-12-01</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>53.85</td>\n",
              "      <td>108.15</td>\n",
              "      <td>61.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7795-CFOCW</th>\n",
              "      <td>2016-05-01</td>\n",
              "      <td>2020-02-01</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Bank transfer (automatic)</td>\n",
              "      <td>42.30</td>\n",
              "      <td>1840.75</td>\n",
              "      <td>1371.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9237-HQITU</th>\n",
              "      <td>2019-09-01</td>\n",
              "      <td>2019-11-01</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>70.70</td>\n",
              "      <td>151.65</td>\n",
              "      <td>61.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            BeginDate    EndDate  ... TotalCharges  Tenure\n",
              "customerID                        ...                     \n",
              "7590-VHVEG 2020-01-01 2020-02-01  ...        29.85    31.0\n",
              "5575-GNVDE 2017-04-01 2020-02-01  ...       1889.5  1036.0\n",
              "3668-QPYBK 2019-10-01 2019-12-01  ...       108.15    61.0\n",
              "7795-CFOCW 2016-05-01 2020-02-01  ...      1840.75  1371.0\n",
              "9237-HQITU 2019-09-01 2019-11-01  ...       151.65    61.0\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fGkJAhCNxqoF"
      },
      "source": [
        "dta=churnDF.join([contractDF, personalDF, phoneDF, internetDF])\r\n",
        "dta=dta[dta['TotalCharges'] != ' ']\r\n",
        "num_cols=['MonthlyCharges', 'TotalCharges', 'SeniorCitizen']\r\n",
        "dta[num_cols]=dta[num_cols].astype(float)\r\n",
        " "
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "znt-TsizQJgh"
      },
      "source": [
        "partial=['PhoneServices', 'MultipleLines', 'InternetService', 'OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport', 'StreamingTV', 'StreamingMovies']\r\n",
        "dta.loc[dta.isna().any(axis=1), partial]='No'\r\n"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U8pGG-pR8Mzd"
      },
      "source": [
        "Task 1: compare the monthly payment distribution to all active clients with the clients who have left"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WskIDIcm70ap",
        "outputId": "e98f4828-b060-433c-cdd3-f8753b0376fb"
      },
      "source": [
        "dta.groupby('churn')['MonthlyCharges'].count() #find out how many clients overall left vs stayed"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "churn\n",
              "0    5163\n",
              "1    1869\n",
              "Name: MonthlyCharges, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "3YCjciTKQINT",
        "outputId": "8071c362-2546-4b27-b95c-2d57eee5b3f4"
      },
      "source": [
        "monthly_aсtive = dta[dta['churn']== 0]['MonthlyCharges']\r\n",
        "monthly_churn = dta[dta['churn'] == 1]['MonthlyCharges']\r\n",
        "plt.hist([monthly_aсtive, monthly_churn], label=['active', 'churned'],density=True),plt.legend(loc='best')   \r\n",
        "plt.title('Table 1: Distribution of monthly payments by client status')\r\n",
        "plt.xlabel('Monthly payment')"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Monthly payment')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "id": "At17cYJ1Ky3N",
        "outputId": "0d979370-c058-4f50-ddb0-9d331536999a"
      },
      "source": [
        "charges=pd.DataFrame(dta[['MonthlyCharges', 'churn']])\r\n",
        "charges.astype(int)\r\n",
        "def q25(x):\r\n",
        "    return x.quantile(0.25)\r\n",
        "def q75(x):\r\n",
        "    return x.quantile(0.75)\r\n",
        "charges.groupby('churn').agg(['mean', 'median', 'min', 'max', q25, q75])\r\n",
        " "
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"6\" halign=\"left\">MonthlyCharges</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>mean</th>\n",
              "      <th>median</th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "      <th>q25</th>\n",
              "      <th>q75</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>churn</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>61.307408</td>\n",
              "      <td>64.45</td>\n",
              "      <td>18.25</td>\n",
              "      <td>118.75</td>\n",
              "      <td>25.10</td>\n",
              "      <td>88.475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>74.441332</td>\n",
              "      <td>79.65</td>\n",
              "      <td>18.85</td>\n",
              "      <td>118.35</td>\n",
              "      <td>56.15</td>\n",
              "      <td>94.200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      MonthlyCharges                                     \n",
              "                mean median    min     max    q25     q75\n",
              "churn                                                    \n",
              "0          61.307408  64.45  18.25  118.75  25.10  88.475\n",
              "1          74.441332  79.65  18.85  118.35  56.15  94.200"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rPAM2NevJNQ3"
      },
      "source": [
        "Explanation: The data show that the distribution of monthly charges for clients who left differ from the current clients' distribution. The former clients' monthly payments were higher on average (75) vs the current clients (61 average). As evident from Table 1, former clients' payments were concentrated on a higher end than the current clients. Half of the former clients paid 79.65 or more a month. That is 15 units more than the current clients. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CSSiE0HCO7sJ"
      },
      "source": [
        "\r\n",
        "Task 2: compare the behavior of the clients from the two groups: the share of telephone users and the share of internet users. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "id": "QKFGg3NCTkFk",
        "outputId": "7fad5a62-6746-4ee0-c1b0-563671937b6c"
      },
      "source": [
        "dta.groupby('PhoneServices')['churn'].agg(['count','mean'])\r\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PhoneServices</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>2200</td>\n",
              "      <td>0.128636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>4832</td>\n",
              "      <td>0.328228</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               count      mean\n",
              "PhoneServices                 \n",
              "No              2200  0.128636\n",
              "Yes             4832  0.328228"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "id": "dJsJJ6t6O7Bh",
        "outputId": "e570a236-f2d8-4ace-fa8c-357f895f9aa7"
      },
      "source": [
        "dta.groupby('InternetService')['churn'].agg(['count', 'mean'])\r\n"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InternetService</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>DSL</th>\n",
              "      <td>1736</td>\n",
              "      <td>0.166475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fiber optic</th>\n",
              "      <td>3096</td>\n",
              "      <td>0.418928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>2200</td>\n",
              "      <td>0.128636</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 count      mean\n",
              "InternetService                 \n",
              "DSL               1736  0.166475\n",
              "Fiber optic       3096  0.418928\n",
              "No                2200  0.128636"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "MqwFaQxQhO23",
        "outputId": "a39a3e02-c615-488f-e510-fb640245fa51"
      },
      "source": [
        "plt.show()\r\n",
        "plt.figure(figsize=(15,8))\r\n",
        "plt.subplot(1, 3, 1)\r\n",
        "dta['PhoneServices'].value_counts().plot(kind='pie', title=' Figure 1: Phone Services use by all')\r\n",
        "plt.subplot(1, 3, 2)\r\n",
        "churned_phone = dta[dta['churn'] == 1]['PhoneServices']\r\n",
        "churned_phone.value_counts().plot(kind='pie', ax=plt.gca(), title='Phone Services use by former clients')\r\n",
        "plt.subplot(1,3,3)\r\n",
        "phone_current=dta[dta['churn']==0]['PhoneServices']\r\n",
        "phone_current.value_counts().plot(kind='pie', ax=plt.gca(), title='Phone Services use by current clients')"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f08d009f410>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x576 with 3 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "GCF5G31hRtVe",
        "outputId": "a2b66e39-37f4-4bdb-c3c8-cd990fb6fefd"
      },
      "source": [
        "print('Overall use of phone services, %:')\r\n",
        "print(round(dta['PhoneServices'].value_counts()/len(dta)*100, 0))\r\n",
        "print('')\r\n",
        "print('-----------------------------------------')\r\n",
        "print('Use of phone services by former clients, %:')\r\n",
        "display(round(churned_phone.value_counts()/len(churned_phone)*100,0))\r\n",
        "print('-----------------------------------------')\r\n",
        "print('Use of phone services by current clients, %:')\r\n",
        "display(round(phone_current.value_counts()/len(phone_current)*100,0))"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Overall use of phone services, %:\n",
            "Yes    69.0\n",
            "No     31.0\n",
            "Name: PhoneServices, dtype: float64\n",
            "\n",
            "-----------------------------------------\n",
            "Use of phone services by former clients, %:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Yes    85.0\n",
              "No     15.0\n",
              "Name: PhoneServices, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "-----------------------------------------\n",
            "Use of phone services by current clients, %:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Yes    63.0\n",
              "No     37.0\n",
              "Name: PhoneServices, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i-k8lNY-Sgkc"
      },
      "source": [
        "**Analysis of phone services use:** Overall, 69% of clients used phone services. The use of phone services was more prevalent among the clients who left. Only 15% of former clients did not use phone services. Among the current customers, 37% do not use phone services."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "kaXpNgrSiz4i",
        "outputId": "b3f59cdb-14e4-43da-acb4-6246077eb45e"
      },
      "source": [
        "plt.show()\r\n",
        "plt.figure(figsize=(15,8))\r\n",
        "plt.subplot(1,3,1)\r\n",
        "dta['InternetService'].value_counts().plot(kind='pie', title=' Figure 2: Internet Services use by all')\r\n",
        "plt.subplot(1, 3, 3)\r\n",
        "active_internet=dta[dta['churn']==0]['InternetService']\r\n",
        "active_internet.value_counts().plot(kind='pie', ax=plt.gca(), title='Internet Services use by active clients') \r\n",
        "plt.subplot(1, 3, 2)\r\n",
        "churned_internet = dta[dta['churn'] == 1]['InternetService']\r\n",
        "churned_internet.value_counts().plot(kind='pie', ax=plt.gca(), title='Internet Services use by former clients')\r\n"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f08cff2fdd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x576 with 3 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IJKxjvDbbllE",
        "outputId": "9e81a5cf-a1d7-4a7a-c98c-9c28f3bea8cc"
      },
      "source": [
        "print('Distribution of Internet use, all clients, %')\r\n",
        "print(round(dta['InternetService'].value_counts()/len(dta)*100, 0))\r\n",
        "print('-------------------------------------------')\r\n",
        "print('Distribution of Interent use, former clients, %')\r\n",
        "print(round(churned_internet.value_counts()/len(churned_internet)*100, 0))\r\n",
        "print('-------------------------------------------')\r\n",
        "print('Distribution of Internet use, current clients, %')\r\n",
        "print(round(active_internet.value_counts()/len(active_internet)*100, 0))"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Distribution of Internet use, all clients, %\n",
            "Fiber optic    44.0\n",
            "No             31.0\n",
            "DSL            25.0\n",
            "Name: InternetService, dtype: float64\n",
            "-------------------------------------------\n",
            "Distribution of Interent use, former clients, %\n",
            "Fiber optic    69.0\n",
            "DSL            15.0\n",
            "No             15.0\n",
            "Name: InternetService, dtype: float64\n",
            "-------------------------------------------\n",
            "Distribution of Internet use, current clients, %\n",
            "No             37.0\n",
            "Fiber optic    35.0\n",
            "DSL            28.0\n",
            "Name: InternetService, dtype: float64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tQ1Z5FvEUnOi"
      },
      "source": [
        "**Analysis of internet use**: Overall, Fiber optic option is the most popular for clients. About 31% of all clients did purchase internet services from the provide. In the former customers' category, only 15% of clients do not use internet, while the predominant majority (69%) use fiber optic internet. The current, active, customers's share of no internet services and fiber optic lingers around 35-37%. About 18% of current customers are still using the DSL internet. The prevalence of former customers' preference for fiber optic may indicate more research into the quality, speed, pricing options and competition for the fiber optic segment of internet services market. "
      ]
    }
  ]
}
